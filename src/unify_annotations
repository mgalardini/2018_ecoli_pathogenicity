#!/usr/bin/env python


def get_options():
    import argparse

    description = 'Merge eggnog with uniprot annotations'
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('uniprot',
                        help='Uniprot query to gene names file')
    parser.add_argument('fasta',
                        help='Representative protein for each OG fasta file')

    parser.add_argument('--names',
                        default=None,
                        help='Literature-derived names for OGs')

    return parser.parse_args()


if __name__ == "__main__":
    options = get_options()

    import sys
    import numpy as np
    import pandas as pd
    from Bio import SeqIO

    names = {}
    if options.names is not None:
        names = {x.rstrip().split()[0]: x.rstrip().split()[1]
                 for x in open(options.names)}

    m = pd.read_table(options.uniprot,
                      index_col=0)

    seqs = {x.id: len(x)
            for x in SeqIO.parse(options.fasta, 'fasta')}

    m['representative_protein_length'] = [seqs.get(x, np.nan)
                                          for x in m.index]
    m = m[['names',
           'uniprot',
           'representative_protein_length']]
    m['literature_name'] = [names.get(x, '')
                            for x in m.index]
    consensus_name1 = [y if y != '' else x.split(',')[0] if str(x) != 'nan' else 'nan'
                      for x, y in m[['names', 'literature_name']].values]
    consensus_name = [x.split(',')[0] if str(x) != 'nan' else y
                      for x, y in zip(consensus_name1, m.index)]
    m['preferred_og_name'] = consensus_name
    m = m.reset_index()
    m = m[['preferred_og_name', 'query',
           'names',
           'uniprot',
           'representative_protein_length']]
    m = m.sort_values('preferred_og_name')
    
    # include OGs that were not mapped to uniprot
    additional = []
    for k, v in seqs.items():
        if k not in m['query'].unique():
            additional.append((names.get(k, k), k, np.nan, np.nan, v))
    if len(additional) > 0:
        additional = pd.DataFrame(additional,
                                  columns=['preferred_og_name', 'query',
                                           'names', 'uniprot',
                                           'representative_protein_length'])
        m = pd.concat([m, additional])

    m.to_csv(sys.stdout,
             sep='\t',
             index=False)
